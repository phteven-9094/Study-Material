	• What is a Git Repo?
		○ A workspace which tracks and manages files within a folder
		○ Anytime we want ot use Git with a project, app, etc we need to create a new git repo. We can have as many repos on our machine as needed, all with separate histories and contents
	• Commands
		○ Git status
			▪ Gives information on the current status of a git repo and its contents
		○ Git init
			▪ Initializes a new repo wherever you are located
			▪ Is only done once per repo
			▪ Do NOT init a repo inside a repo!!!
	• Committing
		○ Essentially creating "checkpoints" on changes you make to a file
		○ Can group multiple changes to one commit
		○ Basic Workflow
			▪ Work on stuff
				• Make new files, edit files, delete files, etc
			▪ Add Changes
				• Group specific changes together, in preparation of committing
			▪ Commit
				• Commit everything that was previously added
		○ We use the git add command to place changes in a 'staging' area
		○ We use the git commit command to actually commit changes from the staging area
			▪ When making a commit, we need to provide a commit message that summarizes the changes and work snapshotted in the commit
			▪ Can use git commit –m "my message" to add a message when committing
		○ Can use git rm –cached <file> to unstage changes
		○ Git log
			▪ See a log of commits on a repo
		○ Keep your commits atomic:
			▪ When possible, a commit should encompass a single feature, change, or fix. 
			▪ Try to keep each commit focused on a single thing
		○ Amending Commits
			▪ Suppose you just made a commit and then realized you forgot to include a file or made a typo
                Rather than making a brand new separate commit, you can "redo" the previous commit using the –amend option