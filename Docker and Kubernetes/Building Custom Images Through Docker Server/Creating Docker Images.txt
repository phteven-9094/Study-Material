 - To create your own image:
    - Dockerfile > Docker Client > Docker Server > Usable image
- Flow:
    - Specify a base image
    - Run some commands to install additional programs
    - Specify a command to run on container startup

- Bulding a Dockerfile
    - Create a new working directory
    - Change into the directory
    - Create a file named Dockerfile
    - See the Dockerfile in this folder
        - Breakdown
            - FROM alpine
                - Pulls the existing Docker Image for Redis
            - RUN 
                - Used to execute some command while we are preparing our custom image
            - CMD
                - Specifies what should be executed when our image is used to start a new container
        - There are many other instructions, but these are the main ones
    - Writing a Dockerfile is basically like being given a computer with no OS and being told to install Chrome
        - You would probably:
            - Install an OS
            - Start up your default browser
            - Navigated to chrome.google.comm
            - Download installer
            - Open file/folder explorer
            - Execute chrome_installer.exe
            - Execute chrome.exe
        - The first step is like Specifying a Base Image (FROM alpine)
        - The next 5 steps are like the run comands to install additional programs (RUN apk add --update redis)
        - The last step is like the command to run on startup (CMD ["redis-server"])
- If you add a line to a Dockerfile (see redis-image folder)
    - Docker will cache the steps that have run before and haven't changed
    - So, under RUN apk add --update redis
        - This would be cached
    - RUN apk add --update gcc
        - This would be actually run
    - Essentially, Docker would only have to run whatever has changed instead of re-running everything