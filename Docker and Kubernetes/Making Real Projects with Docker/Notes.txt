Commands used:
    To run the JS app:
        - install dependencies before running the app
            - npm install
            - RUN command in Dockerfile
        - Have to run a command to start up the server
            - npm start
            - CMD command in Dockerfile

    Build Image:
        - docker build .
            - dot specifies the build context of the working directory
        - docker build -t [your_docker_id/app_name] .
            - Tags the image so you don't need the long ids
    
    Run Container:
        - docker run -p 8080 : 8080 <image name>
            - First 8080 means Route incoming requests to this port on local host to...
            - 2nd 8080 means this port inside the container
        - docker run -it <container name> sh
            - Starts up a shell inside the container



    Note:
        - The alpine tag in images in Dockerhub generally means you are getting a very stripped down version of the image
        - If Docker is not finding the package.json file:
            - you are most likely missing the COPY command in the Dockerfile
            - COPY . .
                - First dot is the path to the folder to copy from on *your machine* relative to build context
                - 2nd dot is place to copy stuff to insdie *the container*
        - When making a Dockerfile, you very rarely want to copy your app to the root directory
        - WORKDIR /usr/app
            - Any following command will be executed relative to this path in the container
        - In the COPY step, you can specify specific files as well:
            - COPY ./package.json ./
        - You can avoid cache busting and too many rebuilds by specifying the package.json file in one COPY command, and then make a 2nd COPY command after the RUn command
            - COPY ./package.json ./
            - RUN npm install
            - COPY ./ ./
                - Essentially means that npm install only has to run if anything above it has been changed