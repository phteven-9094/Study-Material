    - We'll be generating a Project with a Project Generator
    - We'll be making a React application and wrap it in a container
- Flow Specifics:
    - Github Repo
        - Branches
            - Feature, Master
        - Pull all the latest code from the Feature Branch
        - Make some amount of changes
        - Push those changes to the Feature Branch
        - Create a pull request to take all the changes you've made and merge them to the master Branch
    - Upload code to Travis CI to test your code
    - Deploy to AWS Elastic Beanstalk

- Where does Docker fit in?:
    - Docker is not a requirement to perform this workflow, it's simply a general workflow at most orgs
    - Docker is a tool that will make these tasks easier



- Make sure Node.JS is installed
    - node -v to check the version
    - If no version appears, download node js by googling for it
- To generate the project
    - npx create-react-app <projectname>
        - In this case, it will be found under the folder "frontend"
- Necessary Commands:
    - npm run start
        - Starts up a development server. For development use only.
    - npm run test 
        - Runs tests associated with the project.
    - npm run build
        - Builds a production version of the application
    - Keep in mind, these commands are specific to JavaScript, but there will be other commands for other languages as well
- Creating the Dev Dockerfile
    - We'l end up with 2 Dockerfiles: one for Dev and one for production
    - For the Dev Dockerfile, the changes will be in the file Dockerfile.dev in the frontend folder.
    - To run the custom-named Dockerfile:
        - docker build - f Dockerfile.dev
            - The -f flag is telling docker that we want to specify what file to use
    - To run the dev container
        - Get the image ID
        - docker run -p 3000:3000 <imageid>
- Docker Volumes
    - Instead of doing the straight COPY ..
    - We'll adjust the docker run command
    - We'll be using docker volumes which essentially sets up a placeholder in the container
        - These placeholders are essentially references to your local machine
            - Similar to the port mapping we've been doing
    - Syntax:
        - docker run -p 3000:3000 -v /app/node_modules -v $(pwd):/app <image_id>
                                                        ^ get the present working directory and take the folder and everything inside it, map to the app folder in the container
                                    ^ Put a bookmark on the node_modules folder
                    ^ port mapping
        - This will not work on a Windows machine if you are using CMD Promt or Powershell
            - Note: If you are using Git Bash, it will work
    
- Shorthand with Docker Compose
    - Check the docker-compose.yml file
    - Should be able to just use docker-compose up from there

- Executing tests
    - docker run <image_id> npm run test
    - It's going to start npm test while will run a short test suite
    - Might need to allow std in by using docker run -it <image_id> npm run test
    - This way you can hit Enter to trigger another test run

- Live Updating Tests
    - Can add a new service to the docker-compose.yml file
    - Can attach the test to the existing container
        - Open a 2nd terminal Window
        - Get the running container ID
        - docker exec -it <id> npm run test
        - This will allow you to make changes and not have to re-run the test
    - A better way is the docker-compose solution below

- Docker Compose for Running Tests:
    - Add a 2nd service to the docker-compose file
    